{"version":3,"sources":["components/requests.tsx","components/verihubs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["performOCR","verihubURL","idURL","a","raw","JSON","stringify","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","fetch","response","json","verifyFace","selfieURL","Verihubs","useState","localStorage","getItem","setVerihubURL","setIDURL","setSelfieURL","idResponse","setIDResponse","selfieResponse","setSelfieResponse","error","setError","submitting","setSubmitting","Date","now","setNow","tailLayout","wrapperCol","offset","span","onFinish","Promise","all","message","success","console","undefined","useEffect","interval","setInterval","clearInterval","labelCol","name","initialValues","url","id_url","selfie_url","onFinishFailed","errorInfo","log","Item","label","rules","required","onChange","e","target","value","setItem","type","htmlType","disabled","icon","LoadingOutlined","getTime","JSONComponent","props","App","className","style","margin","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gSAAO,SAAeA,EAAtB,oC,4CAAO,WACLC,EACAC,GAFK,qBAAAC,EAAA,6DAIDC,EAAMC,KAAKC,UAAU,CACvB,QAAWJ,KAGPK,EAAY,IAAIC,SACZC,OAAO,SAAU,oBAC3BF,EAAUE,OAAO,eAAgB,oBAE7BC,EAAiB,CACnBC,OAAQ,OACRC,QAASL,EACTM,KAAMT,EACNU,SAAU,UAhBP,SAoBkBC,MAAM,GAAD,OAAId,EAAJ,kBAAgCS,GApBvD,cAoBCM,EApBD,iBAqBQA,EAASC,OArBjB,sF,sBAwBA,SAAeC,EAAtB,sC,4CAAO,WACLjB,EACAC,EACAiB,GAHK,qBAAAhB,EAAA,6DAKDC,EAAMC,KAAKC,UAAU,CACvB,QAAWJ,EACT,YAAeiB,KAGbZ,EAAY,IAAIC,SACZC,OAAO,SAAU,oBAC3BF,EAAUE,OAAO,eAAgB,oBAE3BC,EAAiB,CACrBC,OAAQ,OACRC,QAASL,EACTM,KAAMT,EACNU,SAAU,UAlBP,SAsBkBC,MAAM,GAAD,OAAId,EAAJ,kBAAgCS,GAtBvD,cAsBCM,EAtBD,iBAuBQA,EAASC,OAvBjB,sF,mCCnBMG,EAAqB,WAAO,IAAD,EACFC,mBAAwBC,aAAaC,QAAQ,eAD3C,mBAC/BtB,EAD+B,KACnBuB,EADmB,OAEZH,mBAAwBC,aAAaC,QAAQ,UAFjC,mBAE/BrB,EAF+B,KAExBuB,EAFwB,OAGJJ,mBAAwBC,aAAaC,QAAQ,cAHzC,mBAG/BJ,EAH+B,KAGpBO,EAHoB,OAKFL,qBALE,mBAK/BM,EAL+B,KAKnBC,EALmB,OAMMP,qBANN,mBAM/BQ,EAN+B,KAMfC,EANe,OAOZT,qBAPY,mBAO/BU,EAP+B,KAOxBC,EAPwB,OAQFX,qBARE,mBAQ/BY,EAR+B,KAQnBC,EARmB,OAShBb,mBAAS,IAAIc,MATG,mBAS/BC,EAT+B,KAS1BC,EAT0B,KAehCC,EAAa,CACjBC,WAAY,CAAEC,OAAQ,EAAGC,KAAM,KAG3BC,EAAQ,uCAAG,sBAAAvC,EAAA,yDACf+B,EAAc,IAAIC,MAClBE,EAAO,IAAIF,MACNlC,EAHU,oDAOVC,EAPU,0EAYPyC,QAAQC,IAAI,CAChB,sBAAC,4BAAAzC,EAAA,+EAEsBH,EAAWC,EAAYC,GAF7C,OAESe,EAFT,OAGGW,EAAcX,GACd4B,IAAQC,QAAQ,uBAJnB,gDAMGC,QAAQhB,MAAR,MACAc,IAAQd,MAAM,WAPjB,wDAAD,GAUA,sBAAC,4BAAA5B,EAAA,yDACMgB,EADN,0EAKsBD,EAAWjB,EAAYC,EAAOiB,GALpD,OAKSF,EALT,OAMGa,EAAkBb,GAClB4B,IAAQC,QAAQ,kBAPnB,kDASGC,QAAQhB,MAAR,MACAc,IAAQd,MAAM,eAVjB,yDAAD,KAvBW,yDAsCbC,EAAS,EAAD,IACRe,QAAQhB,MAAR,MACAc,IAAQd,MAAM,KAAMc,SAxCP,QA0CfX,OAAcc,GA1CC,0DAAH,qDA6CdC,qBAAU,WACR,GAAKhB,EAAL,CAGA,IAAMiB,EAAWC,aACf,WACEd,EAAO,IAAIF,QAEb,KAEF,OAAO,kBAAMiB,cAAcF,OAC1B,CAACjB,IAMJ,OACE,oCACE,wCACA,kBAAC,IAAD,iBAzEW,CACboB,SAAU,CAAEZ,KAAM,GAClBF,WAAY,CAAEE,KAAM,KAuElB,CAEIa,KAAK,QACLC,cAAe,CACbC,IAAKvD,EACLwD,OAAQvD,EACRwD,WAAYvC,GAEduB,SAAUA,EACViB,eAhBe,SAACC,GACtBb,QAAQc,IAAI,UAAWD,MAiBnB,kBAAC,IAAKE,KAAN,CACEC,MAAM,MACNT,KAAK,MACLU,MAAO,CAAC,CAAEC,UAAU,EAAMpB,QAAS,uBAEnC,kBAAC,IAAD,CACEqB,SAAU,SAACC,GACT3C,EAAc2C,EAAEC,OAAOC,OACvB/C,aAAagD,QAAQ,aAAcH,EAAEC,OAAOC,WAKlD,kBAAC,IAAKP,KAAN,CACEC,MAAM,SACNT,KAAK,SACLU,MAAO,CAAC,CAAEC,UAAU,EAAMpB,QAAS,kBAEnC,kBAAC,IAAD,CACEqB,SAAU,SAACC,GACT1C,EAAS0C,EAAEC,OAAOC,OAClB/C,aAAagD,QAAQ,QAASH,EAAEC,OAAOC,WAK7C,kBAAC,IAAKP,KAAN,CACEC,MAAM,aACNT,KAAK,cAEL,kBAAC,IAAD,CACEY,SAAU,SAACC,GACTzC,EAAayC,EAAEC,OAAOC,OACtB/C,aAAagD,QAAQ,YAAaH,EAAEC,OAAOC,WAKjD,kBAAC,IAAKP,KAASxB,EACZL,EACG,kBAAC,IAAD,CACEsC,KAAK,UACLC,SAAS,SACTC,UAAU,EACVC,KAAM,kBAACC,EAAA,EAAD,OAJR,aAKavC,EAAIwC,UAAY3C,EAAW2C,WAAa,IALrD,KAOA,kBAAC,IAAD,CACEL,KAAK,UACLC,SAAS,UAFX,YAQR,4CAEE,kBAAC,EAAD,CAAevD,KAAMU,KAEvB,gDAEE,kBAAC,EAAD,CAAeV,KAAMY,KAEvB,qCAEE,kBAAC,EAAD,CAAeZ,KAAMc,OAMvB8C,EAAsD,SAACC,GAE3D,OADiBA,EAAT7D,KAMN,6BAAMZ,KAAKC,UAAUwE,EAAM7D,KAAM,KAAM,IAJhC,sCCvJI8D,MAlBf,WACE,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,OAAQ,SACnC,kBAAC,EAAD,MACA,4CACc,8BAAM,uBAAGC,KAAK,oBAAR,UADpB,mCAEE,sEACA,6BACE,sCADF,IACoB,qCADpB,IAEE,0DACA,sCAHF,IAIE,8DCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArE,GACLgB,QAAQhB,MAAMA,EAAMc,c","file":"static/js/main.f7d8c427.chunk.js","sourcesContent":["export async function performOCR(\n  verihubURL: string,\n  idURL: string,\n): Promise<object> {\n  let raw = JSON.stringify({\n    \"id_path\": idURL,\n  });\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Accept\", \"application/json\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  let requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n\n  // @ts-ignore\n  const response = await fetch(`${verihubURL}/performOCRurl`, requestOptions)\n  return await response.json();\n}\n\nexport async function verifyFace(\n  verihubURL: string,\n  idURL: string,\n  selfieURL: string,\n): Promise<object> {\n  let raw = JSON.stringify({\n    \"id_path\": idURL,\n      \"selfie_path\": selfieURL,\n  });\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Accept\", \"application/json\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n\n  // @ts-ignore\n  const response = await fetch(`${verihubURL}/verifyFaceurl`, requestOptions)\n  return await response.json();\n}","import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { performOCR, verifyFace } from './requests';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nexport const Verihubs: React.FC = () => {\n  const [verihubURL, setVerihubURL] = useState<string | null>(localStorage.getItem('verihubURL'));\n  const [idURL, setIDURL] = useState<string | null>(localStorage.getItem('idURL'));\n  const [selfieURL, setSelfieURL] = useState<string | null>(localStorage.getItem('selfieURL'));\n\n  const [idResponse, setIDResponse] = useState<object>();\n  const [selfieResponse, setSelfieResponse] = useState<object>();\n  const [error, setError] = useState();\n  const [submitting, setSubmitting] = useState<Date>();\n  const [now, setNow] = useState(new Date());\n\n  const layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n  };\n  const tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n  };\n\n  const onFinish = async () => {\n    setSubmitting(new Date());\n    setNow(new Date());\n    if (!verihubURL) {\n      return;\n    }\n\n    if (!idURL) {\n      return;\n    }\n\n    try {\n      await Promise.all([\n        (async () => {\n          try {\n            const json = await performOCR(verihubURL, idURL);\n            setIDResponse(json);\n            message.success('ID Response Success');\n          } catch (error) {\n            console.error(error);\n            message.error('ID fail');\n          }\n        })(),\n        (async () => {\n          if (!selfieURL) {\n            return;\n          }\n          try {\n            const json = await verifyFace(verihubURL, idURL, selfieURL);\n            setSelfieResponse(json);\n            message.success('Selfie Success');\n          } catch (error) {\n            console.error(error);\n            message.error('Selfie fail');\n          }\n        })(),\n      ])\n    } catch (error) {\n      setError(error);\n      console.error(error);\n      message.error(error.message);\n    }\n    setSubmitting(undefined);\n  }\n\n  useEffect(() => {\n    if (!submitting) {\n      return;\n    }\n    const interval = setInterval(\n      () => {\n        setNow(new Date());\n      },\n      250\n    )\n    return () => clearInterval(interval);\n  }, [submitting]);\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <>\n      <h1>Verihubs</h1>\n      <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{ \n            url: verihubURL,\n            id_url: idURL,\n            selfie_url: selfieURL,\n          }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        > \n        <Form.Item\n          label=\"URL\"\n          name=\"url\"\n          rules={[{ required: true, message: 'Input Verihub URL' }]}\n        >\n          <Input\n            onChange={(e) => {\n              setVerihubURL(e.target.value);\n              localStorage.setItem('verihubURL', e.target.value);\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"ID URL\"\n          name=\"id_url\"\n          rules={[{ required: true, message: 'Input ID URL' }]}\n        >\n          <Input\n            onChange={(e) => {\n              setIDURL(e.target.value);\n              localStorage.setItem('idURL', e.target.value);\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Selfie URL\"\n          name=\"selfie_url\"\n        >\n          <Input\n            onChange={(e) => {\n              setSelfieURL(e.target.value);\n              localStorage.setItem('selfieURL', e.target.value);\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          {submitting\n            ? <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={true}\n                icon={<LoadingOutlined />}>\n                Loading: {(now.getTime() - submitting.getTime()) / 1000}s\n              </Button>\n            : <Button\n                type=\"primary\"\n                htmlType=\"submit\">\n                Submit\n              </Button>\n          }\n        </Form.Item>\n      </Form>\n      <div>\n        ID Response:\n        <JSONComponent json={idResponse} />\n      </div>\n      <div>\n        Selfie Response:\n        <JSONComponent json={selfieResponse} />\n      </div>\n      <div>\n        Error\n        <JSONComponent json={error} />\n      </div>\n    </>\n  );\n}\n\nconst JSONComponent: React.FC<{json: object | undefined}> = (props) => {\n  const { json } = props;\n  if (!json) {\n    return <></>;\n  }\n \n  return (\n    <pre>{JSON.stringify(props.json, null, 2)}</pre>\n  )\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Verihubs } from './components/verihubs';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{margin: '1rem'}}>\n      <Verihubs />\n      <div>\n        You can use <code><a href=\"http://ngrok.io/\">ngrok</a></code> to host files on your computer:\n        <p>To serve a directory, use the terminal:</p>\n        <div>\n          <code>bash</code>/<code>zsh</code>:\n          <pre>./ngrok file file://`pwd`</pre>\n          <code>fish</code>:\n          <pre>./ngrok file file://(pwd)</pre>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}